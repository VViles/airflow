#!/bin/bash
### BEGIN INIT INFO
# Provides:          {{ item.service_name }}
# Required-Start:    $local_fs $network {{ item.dependencies }}
# Required-Stop:     $local_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO

APP_NAME="{{ item.service_name }}"
NAME="{{ item.service_name }}"
SCRIPT="/usr/local/bin/{{ item.start_command }}"
RUN_AS="{{ os_user }}"

PIDFILE="{{ service_home }}/{{ item.service_name }}.pid"
LOGFILE="{{ service_home }}/{{ item.service_name }}.log"

AIRFLOW_HOME="{{ service_home }}"

running() {
  if [ -s "$PIDFILE" ] && [ ! -z $(pgrep --pidfile "$PIDFILE") ]; then
    return 0
  fi
  return 1
}


echo_error() {
    echo "$1"
}


status() {
  if running; then
    echo "Service $APP_NAME running"
  else
    echo "Service $APP_NAME not running"
  fi
}


start() {
  if running; then
    echo_error "Service $APP_NAME already running"
    return 0
  fi

  echo "Starting service $APP_NAME..."
  local CMD="$SCRIPT > \"$LOGFILE\" 2>&1 & echo \$! > $PIDFILE"
  sudo su -c "$CMD" "$RUN_AS"

  if running; then
    echo "Service $APP_NAME started"
  else
    echo "Failed to start service $APP_NAME"
    return 1
  fi
}


stop() {
  if ! running; then
    echo_error 'Service not running'
    return 0
  fi

  echo "Stopping service $APP_NAME..."
  sudo kill -15 $(cat "$PIDFILE") && rm -f "$PIDFILE"
  echo "Service $APP_NAME stopped"
}

check() {
    if running; then
      echo 'up'
      return 0
    else
      echo 'down'
      return 1
    fi
}

case "$1" in
  status)
    status ;;
  start)
    start ;;
  stop)
    stop ;;
  restart)
    stop
    start ;;
  check)
    check ;;
  *)
  echo "Usage: $0 {status|start|stop|restart|check}"
esac